
56. Merge Intervals

solution approaches

1. sort and check every interval if it can be merged // not covering because interviewer won't bother you to code that
2. sort and in one go check if ending of an interval in less than or equal to start of next interval 
	if so then it is to be merged otherwise put the corresponding merged interval in the ans.
	
	O(nlog(n)) time complexity and O(n) space complexity

    class Solution {
        public int[][] merge(int[][] intervals) {
            ArrayList<int []> mergedIntervals = new ArrayList<>();

            if(intervals.length == 0 || intervals == null){
                return mergedIntervals.toArray(new int[0][]);
            }

            Arrays.sort(intervals , (a , b) -> a[0] - b[0]);
            int left = intervals[0][0];
            int right = intervals[0][1];

            for(int i = 1 ; i < intervals.length ; i++){
                if(intervals[i][0] <= right){
                    right = Math.max(right , intervals[i][1]);
                }else {
                    mergedIntervals.add(new int[]{left , right});
                    left = intervals[i][0];
                    right = intervals[i][1];
                }
            }
            mergedIntervals.add(new int[]{left , right});
            return mergedIntervals.toArray(new int[0][]);

        }
    }
