

876. Middle of the Linked List

solution approaches

1. brute force count the list size and then traverse till middle
	O(n) time and O(1) space

    /**
     * Definition for singly-linked list.
     * public class ListNode {
     *     int val;
     *     ListNode next;
     *     ListNode() {}
     *     ListNode(int val) { this.val = val; }
     *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
     * }
     */
    class Solution {
        public ListNode middleNode(ListNode head) {
            if(head == null || head.next == null)return head;
            int count = 0;
            ListNode curr = head;
            while(curr != null){
                curr = curr.next;
                count++;
            }
            curr = head;
            if((count & 1) == 0)count = count/2 + 1;
            else count = (count+1)/2;
            for(int i = 1 ; i< count ; i++){
                curr = curr.next;
            }
            return curr;
        }
    }

2. totoise approach take two ptrs one move with twice speed than other
	O(n) time and O(1) space

    /**
     * Definition for singly-linked list.
     * public class ListNode {
     *     int val;
     *     ListNode next;
     *     ListNode() {}
     *     ListNode(int val) { this.val = val; }
     *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
     * }
     */
    class Solution {
        public ListNode middleNode(ListNode head) {
            if(head == null || head.next == null)return head;
            ListNode  slow = head , fast = head;
            
            while(fast != null && fast.next != null){
                slow = slow.next;
                fast = fast.next;
                if(fast != null && fast.next != null)fast = fast.next;
            }
            return slow;
            
        }
    }
