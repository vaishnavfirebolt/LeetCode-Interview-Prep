21. Merge Two Sorted Lists

solution approaches

1. make another list choosing min val at every step and if any list is empty add the other one to the ans list and return head . make sure to
	store the head
	
	Time O(n + m) and space is O(n + m)

    /**
     * Definition for singly-linked list.
     * public class ListNode {
     *     int val;
     *     ListNode next;
     *     ListNode() {}
     *     ListNode(int val) { this.val = val; }
     *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
     * }
     */
    class Solution {
        public ListNode mergeTwoLists(ListNode l1, ListNode l2) {

            if(l1 == null)return l2;
            if(l2 == null)return l1;

            ListNode head = null ;
            if(l1.val <= l2.val){
                 head = l1;
                 l1 = l1.next;
            }else {
                 head = l2;
                 l2 = l2.next;
             }
            ListNode temp  = head;
            while(l1 != null && l2 != null){
                if(l1.val <= l2.val){
                     head.next = l1;
                     l1 = l1.next;
                     head = head.next;
                }else {
                     head.next = l2;
                     l2 = l2.next;
                     head = head.next;
                }
            }
            if(l1 == null)head.next = l2;
            if(l2 == null)head.next = l1;
            return temp;
        }
    }

2. doing the same thing as above but in place to reduce space complexity

	O(n) time and O(1) space

    /**
     * Definition for singly-linked list.
     * public class ListNode {
     *     int val;
     *     ListNode next;
     *     ListNode() {}
     *     ListNode(int val) { this.val = val; }
     *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
     * }
     */
    class Solution {
        public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
            if(l1 == null)return l2;
            if(l2 == null)return l1;

          if(l1.val > l2.val){
              ListNode temp = l1;
              l1 = l2;
              l2 = temp;
          }

          ListNode toReturn = l1;

            while(l1 != null && l2 != null){
                ListNode temp = null;
                while(l1 != null && l1.val <= l2.val){
                    temp = l1;
                    l1 = l1.next;
                }
                temp.next = l2;

                ListNode tmp = l1;
                l1 = l2;
                l2 = tmp;
            }
            return toReturn;  
        }
    }
