62. Unique Paths

solution approaches

1. brute force try all approaches

	Time complexity exponential space complexity exponential 

    class Solution {
        public int uniquePaths(int m, int n) {
            return(uniquePathsUtil(0 , 0 , m , n));
        }

        public int uniquePathsUtil( int i , int j , int m, int n) {
            if(i == m -1 && j == n -1)return 1;
            if(i >= m || j >= n)return 0;
            int left = uniquePathsUtil(i , j+1 , m , n);
            int down = uniquePathsUtil(i+1 , j , m , n);
            return left + down;
        }
    }

2 . dynamic programming solution store the computed solutions in an 2d array

 
	Time complexity O(n*m) space complexity O(n * m)

    class Solution {
        public int uniquePaths(int m, int n) {
            Integer dp[][] = new Integer[m+1][n+1];
            return(uniquePathsUtil(0 , 0 , m , n , dp));
        }

        public int uniquePathsUtil( int i , int j , int m, int n , Integer dp[][]) {
            if(i == m -1 && j == n -1)return 1;
            if(i >= m || j >= n)return 0;
            
            if(dp[i][j] != null)return dp[i][j];
            int left = uniquePathsUtil(i , j+1 , m , n , dp);
            int down = uniquePathsUtil(i+1 , j , m , n ,dp);
            return dp[i][j] = left + down;
        }
    }



3.  using combinatorics

	Time complexity O(m) space complexity O(1)


class Solution {
    public int uniquePaths(int m, int n) {
        int N = n + m - 2;
        int r = m - 1;
        double ans = 1 ;
        
        for(int i = 1 ; i <= r ; i++){
            ans = ans * (N - r + i)/i;
        }
        return (int)ans;
    }
}
