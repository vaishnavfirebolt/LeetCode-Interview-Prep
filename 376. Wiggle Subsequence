// approach one 
class Solution {
    public int wiggleMaxLength(int[] nums) {
        int n = nums.length ;
        int dp[][] = new int[n+1][2];
        
        int ans = 0;
        for(int i = 0 ; i < n ; i++){
            dp[i][0] = 1;
            dp[i][1] = 1;
            for(int j = 0 ; j < i ; j++){
                if(nums[j] < nums[i]){
                    dp[i][1] = Math.max(dp[i][1] , dp[j][0] + 1);
                }
                if(nums[j] > nums[i]){
                    dp[i][0] = Math.max(dp[i][0] , dp[j][1] + 1);
                }
            }
            ans = Math.max(ans , Math.max(dp[i][0] , dp[i][1]));
        }
        return ans ;
    }
}

//approach 2
class Solution {
    public int wiggleMaxLength(int[] nums) {
        int n = nums.length ;
        if(n < 2)return n;
        int diff = nums[1] - nums[0];
        int ans;
        if(diff == 0)ans = 1;
        else ans = 2;
        
        for(int i = 2 ; i< n ; i++){
            int cDiff = nums[i] - nums[i - 1];
            if(cDiff > 0 && diff <= 0 || cDiff < 0 && diff >= 0){
                ans++;
                diff = cDiff;
            }
        }
        return ans;
    }
}
