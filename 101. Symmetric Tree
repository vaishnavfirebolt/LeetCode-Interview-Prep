101. Symmetric Tree

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public boolean isSymmetric(TreeNode root) {
        if(root == null || (root.left == null && root.right == null))return true;
        
        return isSymmetricUtil(root , root);
    }
    private boolean isSymmetricUtil(TreeNode parent1 , TreeNode parent2){
        if(parent1 == null && parent2 == null)return true;
        if(parent1 == null || parent2 == null)return false;
        return (parent1.val == parent2.val && isSymmetricUtil(parent1.left , parent2.right) && isSymmetricUtil(parent2.left , parent1.right));
    }
}
