53. Maximum Subarray

solution approaches

1. Try all possible subArrays
	O(n^2) time complexity and O(1) space complexity


    class Solution {
        public int maxSubArray(int[] nums) {
            int maxSum = Integer.MIN_VALUE;
            for(int i = 0  ; i <  nums.length ; i++){
                int currentSum = 0;
                for(int j = i ; j < nums.length ; j++){
                    currentSum += nums[j];
                    maxSum = Math.max(maxSum , currentSum);
                }
            }
            return maxSum;
        }
    }

2. Kadane's Algorithm check and store max sum till the current index... main intitution is that we keep a greater positive sum 
	to be used later 
	O(n) time complexity and O(1) space complexity

    class Solution {
        public int maxSubArray(int[] nums) {
            int maxSum = nums[0];
            int currentSum = nums[0];
            for(int i = 1; i < nums.length ; i++){
                currentSum = Math.max(currentSum + nums[i] , nums[i]);
                maxSum = Math.max(maxSum , currentSum);
            }
            return maxSum;
        }
    }
