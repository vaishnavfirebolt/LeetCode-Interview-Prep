50. Pow(x, n)

solution approaches

1. mutliplying x |n| times and if n is negative then ans = 1/multiplied ans

	Time complexity O(n) space complexity O(1) ## TLE

    class Solution {
        public double myPow(double x, int n) {
            double ans = 1 ; 
            for(int i = 0 ; i < Math.abs(n) ; i++){
                ans *= x;
            }
            if(n < 0){
                return 1/ans;
            }else return ans;
        }
    }

2. if n == even then we do (x * x)^n/2 else x * x^n 


	Time complexity O(log(n)) space complexity O(1) 

        class Solution {
            public double myPow(double x, int n) {
                long k = n;
                if(n < 0) k = -1 * k;
                double ans = 1.0;

                while(k > 0){
                    if((k&1) == 0){
                     x = x * x;
                     k = k/2;
                    }
                    else {
                        ans *= x;
                        k--;
                    }
                }
                if(n < 0)ans = (double)1.0/(double)ans;
                return ans;
            }
        }
